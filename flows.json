[
    {
        "id": "35ebad916f0a27ed",
        "type": "tab",
        "label": "blinky-mqtt-trays",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "84d80994.260508",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "$(MQTTPORT)",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "49c7b59e.00e86c",
        "type": "inject",
        "z": "35ebad916f0a27ed",
        "name": "initFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "initFlow",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "f7b2b73c.569598",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Init flow Variables",
        "func": "var trayProps = {\n    box         :   env.get(\"BOX\"),\n    type        :   env.get(\"TRAYTYPE\"),\n};\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nflow.set('traysConfig',[]);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "1a3f1121b7b0f033",
                "1849ea2986414070",
                "fbbf0c53817cba2e"
            ]
        ]
    },
    {
        "id": "2545c4a66f386231",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "check for tray defined in",
        "links": [
            "175febc97e8ae24a"
        ],
        "x": 525,
        "y": 180,
        "wires": [
            [
                "1a3f1121b7b0f033"
            ]
        ]
    },
    {
        "id": "1a3f1121b7b0f033",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Request tray from Database",
        "func": "if (flow.get('traysConfig').length > 0) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for tray from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.type + '/' + 'ALL' + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + 'ALL' + '/setting/echo' })\n};\nreturn [newMsg, { topic: \"getTrayProps\", payload: true }];  \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [
                "063def90cca3eae3"
            ],
            [
                "26dd391080aedecf"
            ]
        ]
    },
    {
        "id": "063def90cca3eae3",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "request tray echo out",
        "mode": "link",
        "links": [
            "f882c2407b2620be"
        ],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "26dd391080aedecf",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 120,
        "wires": [
            [
                "175febc97e8ae24a"
            ]
        ]
    },
    {
        "id": "175febc97e8ae24a",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "check for tray defined out",
        "mode": "link",
        "links": [
            "2545c4a66f386231"
        ],
        "x": 1045,
        "y": 180,
        "wires": []
    },
    {
        "id": "f882c2407b2620be",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "request tray echo in",
        "links": [
            "063def90cca3eae3",
            "55b54f13100eb833",
            "7c04905765b7cb23"
        ],
        "x": 1595,
        "y": 240,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "5023092b.a0fe38",
        "type": "mqtt in",
        "z": "35ebad916f0a27ed",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 200,
        "y": 420,
        "wires": [
            [
                "f812bb6a.1aec68"
            ]
        ]
    },
    {
        "id": "f812bb6a.1aec68",
        "type": "json",
        "z": "35ebad916f0a27ed",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 380,
        "y": 420,
        "wires": [
            [
                "e0d2b8e49c2e469b"
            ]
        ]
    },
    {
        "id": "f9be9054ce456982",
        "type": "switch",
        "z": "35ebad916f0a27ed",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reloadTrays",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "postMortem",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 720,
        "y": 420,
        "wires": [
            [
                "ce7c14e281a023dc"
            ],
            [
                "a9b1f3a35cafde9c"
            ],
            [
                "e560bca3296d3f84"
            ],
            [
                "24f5d970df2b1dfa"
            ],
            [
                "4bc813284823bae3"
            ],
            [
                "be17ae16590db703"
            ]
        ]
    },
    {
        "id": "e0d2b8e49c2e469b",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Filter MQTT",
        "func": "let mqttTopic = msg.topic.split('/')\nlet trayName = mqttTopic[3];\nlet actionTopic = mqttTopic[5];\nif (trayName == 'admin')\n{\n    if (actionTopic == 'setting') actionTopic = 'reloadTrays'\n    return {topic:actionTopic, payload:msg.payload};\n}\nif (actionTopic == 'echo')\n{\n    return {topic:'echo', payload:msg.payload};\n}\nlet traysConfig = flow.get('traysConfig');\nlet trayConfig = null;\nfor (let ii = 0; ii < traysConfig.length; ++ii)\n{\n    if (traysConfig[ii].tray.name == trayName)  trayConfig = traysConfig[ii];\n}\nif (trayConfig ==  null) return null;\nreturn {topic:actionTopic, payload:msg.payload, trayConfig:trayConfig};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "24f5d970df2b1dfa",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Save Trays in flow",
        "func": "let tray = msg.payload;\nif (tray.name == 'admin')\n{\n    tray.reloadTrays.value = 0;\n    flow.set('adminTray', tray);\n    return null;\n}\nlet traysConfig = flow.get('traysConfig');\nlet picobusCubes = [];\nlet picobusSettingCubes = [];\nlet keys = Object.keys(msg.payload)\nlet byteLength = 0;\nfor (let ikey  in keys)\n{\n    if (msg.payload[keys[ikey]].hasOwnProperty('type'))\n    {\n        if (msg.payload[keys[ikey]].hasOwnProperty('picobus')) \n        {\n            byteLength = byteLength + getByteLength(msg.payload[keys[ikey]].picobus.type);\n            picobusCubes.push(keys[ikey]);\n            if (msg.payload[keys[ikey]].action == \"setting\") \n            {\n                picobusSettingCubes.push(keys[ikey]);\n            }\n        }\n    }\n}\ntray.trayControl.value = 0;\nlet index = -1;\nfor (let itray in traysConfig)\n{\n    if ((traysConfig[itray].tray.type == tray.type) && (traysConfig[itray].tray.name == tray.name))\n    {\n        index = Number(itray);\n    }\n}\nif (index < 0)\n{\n    traysConfig.push({tray:tray, picobusCubes:picobusCubes, picobusSettingCubes:picobusSettingCubes, archiveTime:tray.timeStamp, cubeType:\"cube\", byteLength:byteLength});\n}\nelse\n{\n    traysConfig[index] = {tray:tray, picobusCubes:picobusCubes, picobusSettingCubes:picobusSettingCubes, archiveTime:tray.timeStamp, cubeType:\"cube\", byteLength:byteLength};\n}\nreturn null;\n\nfunction getByteLength(picobusType)\n{\n    let bytes = 0;\n    if (picobusType.indexOf(\"8\")  >= 0) bytes = 1;\n    if (picobusType.indexOf(\"16\") >= 0) bytes = 2;\n    if (picobusType.indexOf(\"32\") >= 0) bytes = 4;\n    if (picobusType.indexOf(\"64\") >= 0) bytes = 8;\n    return bytes;\n}",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 540,
        "wires": []
    },
    {
        "id": "cffe9c2a52b1e43e",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "New Reading out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 575,
        "y": 640,
        "wires": []
    },
    {
        "id": "0dba75772bcd5ea0",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "New Archive out",
        "mode": "link",
        "links": [
            "ce5672e1f22d7692"
        ],
        "x": 575,
        "y": 680,
        "wires": []
    },
    {
        "id": "da3c617faa3892d7",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Create Readings",
        "func": "let topicSplit = msg.topic.split('/');\nif (topicSplit[1] == 'tray') return [null,null,null];\nlet trayName = topicSplit[3];\nlet traysConfig = flow.get('traysConfig');\nif (traysConfig == undefined) return [null,null,null];\nif (traysConfig.length < 1) return [null,null,null];\nlet trayConfig = null;\nlet trayIndex = -1;\nfor (let ii = 0; ii < traysConfig.length; ++ii)\n{\n    if (traysConfig[ii].tray.name == trayName)\n    {\n        trayConfig = traysConfig[ii];\n        trayIndex = ii;\n    }\n}\nif (trayConfig ==  null) return [null,null,null];\ntrayConfig.cubeType = topicSplit[1];\ntrayConfig.tray.timeStamp = new Date().getTime();\nlet dataview  = new DataView(new ArrayBuffer(msg.payload.length));\nfor (let ib = 0; ib < msg.payload.length; ++ib)   dataview.setUint8(ib, msg.payload[ib]);\nlet state = dataview.getUint8(0);\n\nif (state == 1)\n{\n    return [null, null, {topic:\"initDevice\",payload:trayConfig}];\n}\ntrayConfig.tray.forceArchiveData.value = dataview.getUint8(1);\ntrayConfig.tray.watchdog.value = dataview.getUint16(2,true);\ntrayConfig.tray.deviceMac.value = dataview.getUint8(4).toString(16);\nif (trayConfig.tray.deviceMac.value.length < 2) trayConfig.tray.deviceMac.value = \"0\" + trayConfig.tray.deviceMac.value;\nfor (let ii = 1; ii < 6; ++ii)\n{\n    let hexy = dataview.getUint8(4 + ii).toString(16);\n    if (hexy.length < 2) hexy = \"0\" + hexy;\n    trayConfig.tray.deviceMac.value = trayConfig.tray.deviceMac.value + \":\" + hexy;\n}\ntrayConfig.tray.routerMac.value = dataview.getUint8(10).toString(16);\nif (trayConfig.tray.routerMac.value.length < 2) trayConfig.tray.routerMac.value = \"0\" + trayConfig.tray.routerMac.value;\nfor (let ii = 1; ii < 6; ++ii)\n{\n    let hexy = dataview.getUint8(10 + ii).toString(16);\n    if (hexy.length < 2) hexy = \"0\" + hexy;\n    trayConfig.tray.routerMac.value = trayConfig.tray.routerMac.value + \":\" + hexy;\n}\n\nfor (let icube = 0; icube < trayConfig.picobusCubes.length; ++icube)\n{\n    let cube = trayConfig.tray[trayConfig.picobusCubes[icube]];\n    switch (cube.picobus.type) \n    {\n        case 'uint8':\n            cube.value = dataview.getUint8(cube.picobus.byteOffset + 16);\n            break;\n        case 'int8':\n            cube.value = dataview.getInt8(cube.picobus.byteOffset + 16);\n            break;\n        case 'uint16':\n            cube.value = dataview.getUint16(cube.picobus.byteOffset + 16, true);\n            break;\n        case 'int16':\n            cube.value = dataview.getInt16(cube.picobus.byteOffset + 16, true);\n            break;\n        case 'uint32':\n            cube.value = dataview.getUint32(cube.picobus.byteOffset + 16, true);\n            break;\n        case 'int32':\n            cube.value = dataview.getInt32(cube.picobus.byteOffset + 16, true);\n            break;\n        case 'uint64':\n            cube.value = dataview.getBigUint64(cube.picobus.byteOffset + 16, true);\n            break;\n        case 'int64':\n            cube.value = dataview.getBigInt64(cube.picobus.byteOffset + 16), true;\n            break;\n        case 'float32':\n            cube.value = dataview.getFloat32(cube.picobus.byteOffset + 16, true);\n            break;\n        case 'float64':\n            cube.value = dataview.getFloat64(cube.picobus.byteOffset + 16, true);\n            break;\n        default:\n            break;\n    }\n\n    let offset = 0;\n    if (cube.picobus.hasOwnProperty(\"offset\")) offset = cube.picobus.offset;\n    cube.value = (cube.value - offset) / cube.picobus.scale;\n}\ntrayConfig.tray.lastUpdate.value = 0;\n\ntrayConfig.tray.timeStamp = new Date().getTime();\nlet newMsg = {topic:trayName, payload:trayConfig.tray};\nlet archiveMsg = null;\n\nif (trayConfig.tray.forceArchiveData.value > 0)\n{\n    trayConfig.archiveTime = trayConfig.tray.timeStamp;\n    archiveMsg = newMsg;\n}\n\nlet archiveTimes = flow.get('archiveTimes');\nif ((trayConfig.tray.timeStamp - trayConfig.archiveTime) > trayConfig.tray.arcPeriod)\n{\n    trayConfig.archiveTime = trayConfig.tray.timeStamp;\n    archiveMsg = newMsg;\n}\nreturn  [newMsg,archiveMsg,null];\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "cffe9c2a52b1e43e"
            ],
            [
                "0dba75772bcd5ea0"
            ],
            [
                "e616f7335fc84c23"
            ]
        ]
    },
    {
        "id": "8674b6870aed740f",
        "type": "mqtt out",
        "z": "35ebad916f0a27ed",
        "name": "Gizmo MQTT",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1700,
        "y": 720,
        "wires": []
    },
    {
        "id": "644bd24ad5c779d2",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "deviceMQTT publish",
        "links": [
            "e616f7335fc84c23",
            "baed8fbe731e1cf0"
        ],
        "x": 1315,
        "y": 720,
        "wires": [
            [
                "135777d54406608e"
            ]
        ]
    },
    {
        "id": "d029d546e79dc7cc",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Publish tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + tray.type + '/' + tray.name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 300,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "6b45b4c31fad6b8b",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Publish Tray In",
        "links": [
            "cffe9c2a52b1e43e",
            "db68a00ed2d7ce63",
            "87f76838d7e80f8d",
            "938e10b962484b58",
            "fa6fa09999cb358d"
        ],
        "x": 1135,
        "y": 300,
        "wires": [
            [
                "cd5aaf29fd0c0de2"
            ]
        ]
    },
    {
        "id": "03302d45194b1091",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Archive tray",
        "func": "let tray = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + tray.type + '/' + tray.name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 360,
        "wires": [
            [
                "81a2eeceab4079a2"
            ]
        ]
    },
    {
        "id": "ce5672e1f22d7692",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Archive Tray In",
        "links": [
            "0dba75772bcd5ea0",
            "db68a00ed2d7ce63"
        ],
        "x": 1135,
        "y": 360,
        "wires": [
            [
                "c0c0f2e784c5886e"
            ]
        ]
    },
    {
        "id": "81a2eeceab4079a2",
        "type": "delay",
        "z": "35ebad916f0a27ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 360,
        "wires": [
            [
                "05f1df43d04e1ad1"
            ]
        ]
    },
    {
        "id": "e3bf1ffa191c317f",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\n\nlet newMsg = null;\nswitch( tray.trayControl.value)\n{\n    case 0:\n        newMsg = {topic: 'alarmScanCompleted', payload: tray};\n        break;\n    case -1:\n        tray.trayControl.value = 1;\n        newMsg = {topic: 'alarmScanCompleted', payload: tray};\n        break;\n    default:\n        break;\n}\nreturn newMsg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 300,
        "wires": [
            [
                "d029d546e79dc7cc"
            ]
        ]
    },
    {
        "id": "c0c0f2e784c5886e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Alarm Scan",
        "func": "let tray = msg.payload\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn {topic: 'alarmScanCompleted', payload: tray};\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 360,
        "wires": [
            [
                "03302d45194b1091"
            ]
        ]
    },
    {
        "id": "05f1df43d04e1ad1",
        "type": "mqtt out",
        "z": "35ebad916f0a27ed",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84d80994.260508",
        "x": 1830,
        "y": 300,
        "wires": []
    },
    {
        "id": "db68a00ed2d7ce63",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "nonPicobusSetting Out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b",
            "ce5672e1f22d7692"
        ],
        "x": 1045,
        "y": 340,
        "wires": []
    },
    {
        "id": "baed8fbe731e1cf0",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Tray Setting In",
        "mode": "link",
        "links": [
            "644bd24ad5c779d2"
        ],
        "x": 1045,
        "y": 300,
        "wires": []
    },
    {
        "id": "ce7c14e281a023dc",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Create Setting",
        "func": "let tray = msg.trayConfig.tray;\nif (tray[msg.payload.cube].hasOwnProperty('enabled'))\n{\n    if (tray[msg.payload.cube].enabled == 0 ) return [null, null, null]\n}\nlet mqttMsg = null;\nlet normalSettingMsg = {topic:'settingDone', payload:tray};\nlet trayControlMessage = null;\nlet trayProps  = flow.get('trayProps');\n\nlet icube = msg.trayConfig.picobusSettingCubes.indexOf(msg.payload.cube);\n\nif (icube >= 0)\n{\n    msg.trayConfig.tray[msg.payload.cube].value = msg.payload.value;\n    mqttMsg = {topic:\"initDevice\",payload:msg.trayConfig};\n}\nelse\n{\n    switch (msg.payload.cube) \n    {\n        case 'alias':\n            tray.alias.value = msg.payload.value;\n        break;\n        case 'trayControl':\n            switch(msg.payload.value)\n            {\n                case 0:\n                    tray.trayControl.value = 0;\n                    break;\n                case 1:\n                    tray.trayControl.value = -1;\n                    break;\n                case 2:\n                    if (tray.trayControl.value > 0)\n                    {\n                        tray.trayControl.value = 2;\n                        trayControlMessage =\n                        {\n                            topic: trayProps.box + '/tray/' + tray.type + '/' + tray.name + '/echo',\n                            payload: JSON.stringify({ topic: trayProps.box + '/tray/' + tray.type + '/' + tray.name + '/setting/echo' })\n                        };\n                    }\n                    break;\n                default:\n                    tray.trayControl.value = 0;\n                    break;\n             }\n        break;\n        default:\n            break;\n    }\n}\nreturn [mqttMsg, normalSettingMsg, trayControlMessage];",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 320,
        "wires": [
            [
                "baed8fbe731e1cf0"
            ],
            [
                "db68a00ed2d7ce63"
            ],
            [
                "55b54f13100eb833"
            ]
        ]
    },
    {
        "id": "e560bca3296d3f84",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Set Alarm Block",
        "func": "let cubeAlarm = msg.trayConfig.tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\nif (msg.trayConfig.tray[msg.payload.cube].hasOwnProperty('enabled'))\n{\n    if (msg.payload.hasOwnProperty('enabled'))\n    {\n        msg.trayConfig.tray[msg.payload.cube].enabled = msg.payload.enabled;\n    }\n}\nreturn {topic:'trayConfigCompleted', payload:msg.trayConfig.tray};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 480,
        "wires": [
            [
                "938e10b962484b58"
            ]
        ]
    },
    {
        "id": "a9b1f3a35cafde9c",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Ping Tray",
        "func": "return {topic:'ping', payload:msg.trayConfig.tray};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 420,
        "wires": [
            [
                "87f76838d7e80f8d"
            ]
        ]
    },
    {
        "id": "87f76838d7e80f8d",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Ping Out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 1045,
        "y": 420,
        "wires": []
    },
    {
        "id": "938e10b962484b58",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Continue Devie Readings out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 1045,
        "y": 480,
        "wires": []
    },
    {
        "id": "4bc813284823bae3",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Reload trays",
        "func": "if (msg.value == 0) return null;\nreturn {topic:'initFlow', payload: new Date().getTime()}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 600,
        "wires": [
            [
                "e6b2a65ac7c0f8e7"
            ]
        ]
    },
    {
        "id": "e6b2a65ac7c0f8e7",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "reload trays out",
        "mode": "link",
        "links": [
            "a2b6f8c1cd78afa6"
        ],
        "x": 1045,
        "y": 600,
        "wires": []
    },
    {
        "id": "a2b6f8c1cd78afa6",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "reload trays in",
        "links": [
            "e6b2a65ac7c0f8e7"
        ],
        "x": 225,
        "y": 180,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "a1ac9e631b1c38ed",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Cube MQTT Reading topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/+/\" + flow.get('trayProps').type + \"/+/reading\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 600,
        "wires": [
            [
                "947b3065ee2175f6"
            ]
        ]
    },
    {
        "id": "947b3065ee2175f6",
        "type": "mqtt in",
        "z": "35ebad916f0a27ed",
        "name": "Cube MQTT",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 250,
        "y": 680,
        "wires": [
            [
                "da3c617faa3892d7"
            ]
        ]
    },
    {
        "id": "83a5bccd57b9c2a0",
        "type": "link in",
        "z": "35ebad916f0a27ed",
        "name": "Gizmo MQTT Reading topic in",
        "links": [
            "1849ea2986414070"
        ],
        "x": 145,
        "y": 600,
        "wires": [
            [
                "a1ac9e631b1c38ed"
            ]
        ]
    },
    {
        "id": "1849ea2986414070",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Init flow Variables out",
        "mode": "link",
        "links": [
            "83a5bccd57b9c2a0"
        ],
        "x": 445,
        "y": 180,
        "wires": []
    },
    {
        "id": "55b54f13100eb833",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "reload tray out",
        "mode": "link",
        "links": [
            "f882c2407b2620be"
        ],
        "x": 1045,
        "y": 380,
        "wires": []
    },
    {
        "id": "fbbf0c53817cba2e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "MQTT subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').type +\"/+/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 360,
        "wires": [
            [
                "5023092b.a0fe38"
            ]
        ]
    },
    {
        "id": "ee72b88e7a33bf0f",
        "type": "inject",
        "z": "35ebad916f0a27ed",
        "name": "Every Minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 860,
        "wires": [
            [
                "8ed7b16c7cf23baa"
            ]
        ]
    },
    {
        "id": "8ed7b16c7cf23baa",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Check for stale trays",
        "func": "let traysConfig = flow.get('traysConfig');\nlet now = new Date().getTime();\nlet staleTrays = [];\nfor (let ii = 0; ii < traysConfig.length; ++ii)\n{\n    if (traysConfig[ii].tray.hasOwnProperty('lastUpdate'))\n    {\n        let milli = now - traysConfig[ii].tray.timeStamp;\n        traysConfig[ii].tray.lastUpdate.value = Math.round(milli / 3600) / 1000;\n        if (milli > traysConfig[ii].tray.arcPeriod)\n        {\n            staleTrays.push(traysConfig[ii].tray);\n        }\n    }\n}\nif (staleTrays.length < 1) return null;\nreturn {topic: 'staleTrays',payload:staleTrays};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 860,
        "wires": [
            [
                "b8cff6830921f2a3"
            ]
        ]
    },
    {
        "id": "b8cff6830921f2a3",
        "type": "split",
        "z": "35ebad916f0a27ed",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 860,
        "wires": [
            [
                "fa6fa09999cb358d"
            ]
        ]
    },
    {
        "id": "fa6fa09999cb358d",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Stale Tray out",
        "mode": "link",
        "links": [
            "6b45b4c31fad6b8b"
        ],
        "x": 785,
        "y": 860,
        "wires": []
    },
    {
        "id": "cd5aaf29fd0c0de2",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Permit Check",
        "func": "let tray = msg.payload;\nif (tray.hasOwnProperty('permit')) tray.permit.value = 1;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nif (tray.hasOwnProperty('permit'))\n{\n    tray.permit.value = 1;\n    if (alarmFlagReading || alarmFlagSetting) tray.permit.value = 0;\n}\n\nreturn msg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value > 2) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 300,
        "wires": [
            [
                "e3bf1ffa191c317f"
            ]
        ]
    },
    {
        "id": "be17ae16590db703",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "PostMortem",
        "func": "var trayCopy = JSON.parse(JSON.stringify(msg.trayConfig.tray));\ntrayCopy['postMortem'] = msg.payload;\nlet newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + trayCopy.type + '/' + trayCopy.name + '/postMortem',\n    payload: JSON.stringify(trayCopy)\n};\nreturn  newMsg;  \n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 660,
        "wires": [
            [
                "7c04905765b7cb23"
            ]
        ]
    },
    {
        "id": "7c04905765b7cb23",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "postMortem out",
        "mode": "link",
        "links": [
            "f882c2407b2620be"
        ],
        "x": 1045,
        "y": 660,
        "wires": []
    },
    {
        "id": "d090d90b4959132c",
        "type": "debug",
        "z": "35ebad916f0a27ed",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 840,
        "wires": []
    },
    {
        "id": "e616f7335fc84c23",
        "type": "link out",
        "z": "35ebad916f0a27ed",
        "name": "Init device setting in",
        "mode": "link",
        "links": [
            "644bd24ad5c779d2"
        ],
        "x": 575,
        "y": 720,
        "wires": []
    },
    {
        "id": "135777d54406608e",
        "type": "function",
        "z": "35ebad916f0a27ed",
        "name": "Prep Gizmo MQTT data",
        "func": "let trayConfig = msg.payload;\nif (trayConfig.picobusSettingCubes.length < 1) return null;\n\nlet bufsize = 16 + trayConfig.byteLength;\nlet buffer = new ArrayBuffer(bufsize);\nlet settingsView = new DataView(buffer);\nfor (let ii = 0; ii < bufsize; ++ii) settingsView.setUint8(ii, 0);\n\nfor (let icube = 0; icube < trayConfig.picobusSettingCubes.length; ++icube)\n{\n    let cube = trayConfig.tray[trayConfig.picobusSettingCubes[icube]];\n    let offset = 0;\n    if (cube.picobus.hasOwnProperty(\"offset\")) offset = cube.picobus.offset;\n    let cubeValue = cube.value * cube.picobus.scale + offset;\n    switch (cube.picobus.type) \n    {\n        case 'uint8':\n            settingsView.setUint8(cube.picobus.byteOffset + 16, Math.round(cubeValue));\n            break;\n        case 'int8':\n            settingsView.setInt8(cube.picobus.byteOffset + 16, Math.round(cubeValue));\n            break;\n        case 'uint16':\n            settingsView.setUint16(cube.picobus.byteOffset + 16, Math.round(cubeValue), true);\n            break;\n        case 'int16':\n            settingsView.setInt16(cube.picobus.byteOffset + 16, Math.round(cubeValue), true);\n            break;\n        case 'uint32':\n            settingsView.setUint32(cube.picobus.byteOffset + 16, Math.round(cubeValue), true);\n            break;\n        case 'int32':\n            settingsView.setInt32(cube.picobus.byteOffset + 16, Math.round(cubeValue), true);\n            break;\n        case 'uint64':\n            settingsView.setBigUint64(cube.picobus.byteOffset + 16, Math.round(cubeValue), true);\n            break;\n        case 'int64':\n            settingsView.setBigInt64(cube.picobus.byteOffset + 16, Math.round(cubeValue), true);\n            break;\n        case 'float32':\n            settingsView.setFloat32(cube.picobus.byteOffset + 16, cubeValue, true);\n            break;\n        case 'float64':\n            settingsView.setFloat64(cube.picobus.byteOffset + 16, cubeValue, true);\n            break;\n        default:\n            break;\n    }\n}\nlet publishTopic = flow.get('trayProps').box + \"/\" + trayConfig.cubeType + \"/\" + trayConfig.tray.type + \"/\" + trayConfig.tray.name + \"/setting\";\nreturn {topic : publishTopic, payload:Buffer.from(buffer)};\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 720,
        "wires": [
            [
                "8674b6870aed740f",
                "d090d90b4959132c"
            ]
        ]
    }
]